https://www.techrepublic.com/blog/web-designer/how-to-get-the-ruled-paper-background-effect-with-css3/



### CAPSTONE PLANNING--WORK IN PROGRESS
### 2/28/2020
* 8:15 - 8:45 create README, read assignment, plan day
* 8:45 - 9:45 research on writing good test cases and user stories
* 9:45 - 10:20 notes for user stories and acceptance criteria for this MVP; draft user stories added to README
* 10:20 - 12 ~~acceptance criteria drafting~~ scrapped acceptance criteria development for now; reformatted README/project proposal instead
* 12:00 - 1:00 tutorial on audio to text (https://www.freecodecamp.org/news/how-to-build-a-simple-speech-recognition-app-a65860da6108/)
  * QUESTIONS:
    * max length of speech? seems like it cut out.
    * responses (time of day etc. didn't seem to work)
    * save functionality? how to hang onto the text that is generated?
    * assume not going to save audio files
1:00-1:45 break
1:45-3:00 start component tree sketch
3:15-4:15 continue with component tree sketch; draft here: ![MS-Tracker-Component-Tree](/MS-Tracker-Component-Tree.jpg)
  * NEEDED REVISIONS/DECISIONS:
    * Redux or not?
    * State implications of typing versus talking to make an entry

4:15-end of day: research re: react only or use redux? main takeaway: need to revisit component tree
https://spin.atomicobject.com/2017/06/07/react-state-vs-redux-state/:
* "Assuming that your app does use Redux, you need to determine what parts of the state are stored in the Redux store, and what parts are stored in React component state. ";
* "Another consideration is how many components in your React app need to access the state. The more state needs to be shared between different components in your app, the more benefit there is to using the Redux store. If the state feels isolated to a specific component or a small part of your app, React state may be a better option."

https://redux.js.org/faq/organizing-state/:
* Some common rules of thumb for determining what kind of data should be put into Redux:
  * Do other parts of the application care about this data?
  * Do you need to be able to create further derived data based on this original data?
  * Is the same data being used to drive multiple components?
  * Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?
  * Do you want to cache the data (ie, use what's in state if it's already there instead of re-requesting it)?
  * Do you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)?
